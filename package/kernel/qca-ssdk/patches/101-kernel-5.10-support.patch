--- a/Makefile
+++ b/Makefile
@@ -16,6 +16,5 @@ SUB_LIB=$(subst src/, , $(SUB_DIR))
 	make -C $(SYS_PATH) M=$(PRJ_PATH)/temp/ CROSS_COMPILE=$(TOOLPREFIX) modules
 	cp $(PRJ_PATH)/temp/Module.symvers $(PRJ_PATH)/Module.symvers;
 	cp temp/*.ko build/bin;
-	rm -Rf ./temp/*.o ./temp/*.ko ./temp/*.a
 	@echo "---Build [SSDK-$(VERSION)] at $(BUILD_DATE) finished."
 
--- a/config
+++ b/config
@@ -22,6 +22,10 @@ ifeq ($(KVER),$(filter 5.4%,$(KVER)))
 OS_VER=5_4
 endif

+ifeq ($(KVER),$(filter 5.10%,$(KVER)))
+OS_VER=5_10
+endif
+
 ifeq ($(KVER), 3.4.0)
 OS_VER=3_4
 endif
@@ -123,7 +127,7 @@ endif
 endif

 ifeq ($(ARCH), arm64)
-ifeq ($(KVER),$(filter 4.1% 4.4% 4.9% 5.4%,$(KVER)))
-  CPU_CFLAG=  -DMODULE -Os -pipe -march=armv8-a -mcpu=cortex-a53+crypto -fno-caller-saves -fno-strict-aliasing -Werror -fno-common -Wno-format-security -Wno-pointer-sign -Wno-unused-but-set-variable -Wno-error=unused-result -mcmodel=large
+ifeq ($(KVER),$(filter 4.1% 4.4% 4.9% 5.4% 5.10%,$(KVER)))
+  CPU_CFLAG=  -DMODULE -Os -pipe -march=armv8-a -mcpu=cortex-a53+crypto -fno-caller-saves -fno-strict-aliasing -fno-common -Wno-format-security -Wno-pointer-sign -Wno-unused-but-set-variable -Wno-error=unused-result -mcmodel=large
 endif
 endif
--- a/src/sal/sd/linux/uk_interface/sw_api_ks_ioctl.c
+++ b/src/sal/sd/linux/uk_interface/sw_api_ks_ioctl.c
@@ -19,6 +19,6 @@
 #ifdef KVER26 /*Linux Kernel 2.6 */
 #define __USER     __user
 #else /*Linux Kernel 2.4 */
-#include <asm/uaccess.h>
+#include <linux/uaccess.h>
 #define __USER
 #endif /*KVER26 */
--- a/src/init/ssdk_init.c
+++ b/src/init/ssdk_init.c
@@ -1088,12 +1088,12 @@ static struct switch_attr qca_ar8327_globals[] = {
 		.get = qca_ar8327_sw_atu_dump,
 	},
 #endif
-	{
-		.name = "switch_ext",
-		.description = "Switch extended configuration",
-		.type = SWITCH_TYPE_EXT,
-		.set = qca_ar8327_sw_switch_ext,
-	},
+	// {
+	// 	.name = "switch_ext",
+	// 	.description = "Switch extended configuration",
+	// 	.type = SWITCH_TYPE_EXT,
+	// 	.set = qca_ar8327_sw_switch_ext,
+	// },
 };
 
 #if defined(IN_MIB)
@@ -2700,7 +2700,7 @@ static int ssdk_dess_mac_mode_init(a_uint32_t dev_id, a_uint32_t mac_mode)
 							(a_uint8_t *)&reg_value, 4);
 			mdelay(10);
 			/*softreset psgmii, fixme*/
-			gcc_addr = ioremap_nocache(0x1812000, 0x200);
+			gcc_addr = ioremap(0x1812000, 0x200);
 			if (!gcc_addr) {
 				SSDK_ERROR("gcc map fail!\n");
 				return 0;
--- a/src/init/ssdk_clk.c
+++ b/src/init/ssdk_clk.c
@@ -620,7 +620,7 @@ ssdk_mp_cmnblk_enable(void)
 	void __iomem *tcsr_eth = NULL;
 	a_uint32_t reg_val;
 
-	tcsr_eth = ioremap_nocache(TCSR_ETH_ADDR, TCSR_ETH_SIZE);
+	tcsr_eth = ioremap(TCSR_ETH_ADDR, TCSR_ETH_SIZE);
 	if (!tcsr_eth) {
 		SSDK_ERROR("Failed to map tcsr eth address!\n");
 		return;
@@ -640,7 +640,7 @@ ssdk_mp_cmnblk_stable_check(void)
 	a_uint32_t reg_val;
 	int i, loops = 20;
 
-	pll_lock = ioremap_nocache(CMN_PLL_LOCKED_ADDR, CMN_PLL_LOCKED_SIZE);
+	pll_lock = ioremap(CMN_PLL_LOCKED_ADDR, CMN_PLL_LOCKED_SIZE);
 	if (!pll_lock) {
 		SSDK_ERROR("Failed to map CMN PLL LOCK register!\n");
 		return A_FALSE;
@@ -697,7 +697,7 @@ static void ssdk_cmnblk_pll_src_set(enum cmnblk_pll_src_type pll_source)
 	void __iomem *cmn_pll_src_base = NULL;
 	a_uint32_t reg_val;
 
-	cmn_pll_src_base = ioremap_nocache(CMN_BLK_PLL_SRC_ADDR, CMN_BLK_SIZE);
+	cmn_pll_src_base = ioremap(CMN_BLK_PLL_SRC_ADDR, CMN_BLK_SIZE);
 	if (!cmn_pll_src_base) {
 		SSDK_ERROR("Failed to map cmn pll source address!\n");
 		return;
@@ -718,7 +718,7 @@ static void ssdk_cmnblk_pll_src_set(enum cmnblk_pll_src_type pll_source)
 	void __iomem *gcc_pll_base = NULL;
 	a_uint32_t reg_val;
 
-	gcc_pll_base = ioremap_nocache(CMN_BLK_ADDR, CMN_BLK_SIZE);
+	gcc_pll_base = ioremap(CMN_BLK_ADDR, CMN_BLK_SIZE);
 	if (!gcc_pll_base) {
 		SSDK_ERROR("Failed to map gcc pll address!\n");
 		return;
--- a/src/init/ssdk_plat.c
+++ b/src/init/ssdk_plat.c
@@ -1296,7 +1296,7 @@ ssdk_plat_init(ssdk_init_cfg *cfg, a_uint32_t dev_id)
 	reg_mode = ssdk_uniphy_reg_access_mode_get(dev_id);
 	if(reg_mode == HSL_REG_LOCAL_BUS) {
 		ssdk_uniphy_reg_map_info_get(dev_id, &map);
-		qca_phy_priv_global[dev_id]->uniphy_hw_addr = ioremap_nocache(map.base_addr,
+		qca_phy_priv_global[dev_id]->uniphy_hw_addr = ioremap(map.base_addr,
 									map.size);
 		if (!qca_phy_priv_global[dev_id]->uniphy_hw_addr) {
 			SSDK_ERROR("%s ioremap fail.", __func__);
@@ -1310,7 +1310,7 @@ ssdk_plat_init(ssdk_init_cfg *cfg, a_uint32_t dev_id)
 	reg_mode = ssdk_switch_reg_access_mode_get(dev_id);
 	if(reg_mode == HSL_REG_LOCAL_BUS) {
 		ssdk_switch_reg_map_info_get(dev_id, &map);
-		qca_phy_priv_global[dev_id]->hw_addr = ioremap_nocache(map.base_addr,
+		qca_phy_priv_global[dev_id]->hw_addr = ioremap(map.base_addr,
 								map.size);
 		if (!qca_phy_priv_global[dev_id]->hw_addr) {
 			SSDK_ERROR("%s ioremap fail.", __func__);
@@ -1341,7 +1341,7 @@ ssdk_plat_init(ssdk_init_cfg *cfg, a_uint32_t dev_id)
 			return -1;
 		}
 
-		qca_phy_priv_global[dev_id]->psgmii_hw_addr = ioremap_nocache(map.base_addr,
+		qca_phy_priv_global[dev_id]->psgmii_hw_addr = ioremap(map.base_addr,
 								map.size);
 		if (!qca_phy_priv_global[dev_id]->psgmii_hw_addr) {
 			SSDK_ERROR("%s ioremap fail.", __func__);
