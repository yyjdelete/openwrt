From fcbae2838ef1184d67ca76c04b1bd3a25815c693 Mon Sep 17 00:00:00 2001
From: Ansuel Smith <ansuelsmth@gmail.com>
Date: Wed, 11 Nov 2020 15:30:25 +0100
Subject: [PATCH] nss-dp: add support for 5.9

Signed-off-by: Ansuel Smith <ansuelsmth@gmail.com>
---
 hal/edma/edma_data_plane.c          |  2 +-
 hal/edma/edma_tx_rx.c               | 18 +++++++++---------
 hal/gmac_hal_ops/qcom/qcom_if.c     |  2 +-
 hal/gmac_hal_ops/syn/xgmac/syn_if.c |  2 +-
 nss_dp_main.c                       |  6 +++++-
 5 files changed, 17 insertions(+), 13 deletions(-)

diff --git a/hal/edma/edma_data_plane.c b/hal/edma/edma_data_plane.c
index d51c7f0..dae97ce 100644
--- a/hal/edma/edma_data_plane.c
+++ b/hal/edma/edma_data_plane.c
@@ -741,7 +741,7 @@ int edma_init(void)
 	/*
 	 * Remap register resource
 	 */
-	edma_hw.reg_base = ioremap_nocache((edma_hw.reg_resource)->start,
+	edma_hw.reg_base = ioremap((edma_hw.reg_resource)->start,
 				resource_size(edma_hw.reg_resource));
 	if (!edma_hw.reg_base) {
 		pr_warn("Unable to remap EDMA register memory.\n");
diff --git a/hal/edma/edma_tx_rx.c b/hal/edma/edma_tx_rx.c
index eeae567..854ac8a 100644
--- a/hal/edma/edma_tx_rx.c
+++ b/hal/edma/edma_tx_rx.c
@@ -224,11 +224,11 @@ void nss_phy_tstamp_rx_buf(__attribute__((unused))void *app_data, struct sk_buff
 	/*
 	 * The PTP_CLASS_ value 0 is passed to phy driver, which will be
 	 * set to the correct PTP class value by calling ptp_classify_raw
-	 * in drv->rxtstamp function.
+	 * in mii_ts->rxtstamp function.
 	 */
-	if (ndev && ndev->phydev && ndev->phydev->drv &&
-			ndev->phydev->drv->rxtstamp)
-		if(ndev->phydev->drv->rxtstamp(ndev->phydev, skb, 0))
+	if (ndev && ndev->phydev && ndev->phydev->mii_ts &&
+			ndev->phydev->mii_ts->rxtstamp)
+		if(ndev->phydev->mii_ts->rxtstamp(ndev->phydev->mii_ts, skb, 0))
 			return;
 
 	netif_receive_skb(skb);
@@ -242,14 +242,14 @@ EXPORT_SYMBOL(nss_phy_tstamp_rx_buf);
 void nss_phy_tstamp_tx_buf(struct net_device *ndev, struct sk_buff *skb)
 {
 	/*
-	 * Function drv->txtstamp will create a clone of skb if necessary,
+	 * Function mii_ts->txtstamp will create a clone of skb if necessary,
 	 * the PTP_CLASS_ value 0 is passed to phy driver, which will be
 	 * set to the correct PTP class value by calling ptp_classify_raw
-	 * in the drv->txtstamp function.
+	 * in the mii_ts->txtstamp function.
 	 */
-	if (ndev && ndev->phydev && ndev->phydev->drv &&
-			ndev->phydev->drv->txtstamp)
-		ndev->phydev->drv->txtstamp(ndev->phydev, skb, 0);
+	if (ndev && ndev->phydev && ndev->phydev->mii_ts &&
+			ndev->phydev->mii_ts->txtstamp)
+		ndev->phydev->mii_ts->txtstamp(ndev->phydev->mii_ts, skb, 0);
 }
 EXPORT_SYMBOL(nss_phy_tstamp_tx_buf);
 
diff --git a/hal/gmac_hal_ops/qcom/qcom_if.c b/hal/gmac_hal_ops/qcom/qcom_if.c
index b9b5968..25eddf9 100644
--- a/hal/gmac_hal_ops/qcom/qcom_if.c
+++ b/hal/gmac_hal_ops/qcom/qcom_if.c
@@ -400,7 +400,7 @@ static void *qcom_init(struct gmac_hal_platform_data *gmacpdata)
 	qhd->nghd.mac_id = gmacpdata->macid;
 
 	/* Populate the mac base addresses */
-	qhd->nghd.mac_base = devm_ioremap_nocache(&dp_priv->pdev->dev,
+	qhd->nghd.mac_base = devm_ioremap(&dp_priv->pdev->dev,
 						res->start, resource_size(res));
 	if (!qhd->nghd.mac_base) {
 		netdev_dbg(ndev, "ioremap fail.\n");
diff --git a/hal/gmac_hal_ops/syn/xgmac/syn_if.c b/hal/gmac_hal_ops/syn/xgmac/syn_if.c
index 1ab621a..0d5b9a8 100644
--- a/hal/gmac_hal_ops/syn/xgmac/syn_if.c
+++ b/hal/gmac_hal_ops/syn/xgmac/syn_if.c
@@ -422,7 +422,7 @@ static void *syn_init(struct gmac_hal_platform_data *gmacpdata)
 
 	/* Populate the mac base addresses */
 	shd->nghd.mac_base =
-		devm_ioremap_nocache(&dp_priv->pdev->dev, res->start,
+		devm_ioremap(&dp_priv->pdev->dev, res->start,
 				     resource_size(res));
 	if (!shd->nghd.mac_base) {
 		netdev_dbg(ndev, "ioremap fail.\n");
diff --git a/nss_dp_main.c b/nss_dp_main.c
index 5580b13..59e8184 100644
--- a/nss_dp_main.c
+++ b/nss_dp_main.c
@@ -434,6 +434,7 @@ static int32_t nss_dp_of_get_pdata(struct device_node *np,
 				   struct net_device *netdev,
 				   struct gmac_hal_platform_data *hal_pdata)
 {
+	int err;
 	uint8_t *maddr;
 	struct nss_dp_dev *dp_priv;
 	struct resource memres_devtree = {0};
@@ -463,7 +464,10 @@ static int32_t nss_dp_of_get_pdata(struct device_node *np,
 	hal_pdata->netdev = netdev;
 	hal_pdata->macid = dp_priv->macid;
 
-	dp_priv->phy_mii_type = of_get_phy_mode(np);
+	err = of_get_phy_mode(np, &dp_priv->phy_mii_type);
+	if (err)
+		return err;
+
 	dp_priv->link_poll = of_property_read_bool(np, "qcom,link-poll");
 	if (of_property_read_u32(np, "qcom,phy-mdio-addr",
 		&dp_priv->phy_mdio_addr) && dp_priv->link_poll) {
@@ -502,9 +502,9 @@ static int32_t nss_dp_of_get_pdata(struct device_node *np,
  */
 static struct mii_bus *nss_dp_mdio_attach(struct platform_device *pdev)
 {
+	struct mii_bus *bus;
 	struct device_node *mdio_node;
 	struct platform_device *mdio_plat;
-	struct ipq40xx_mdio_data *mdio_data;
 
 	/*
 	 * Find mii_bus using "mdio-bus" handle.
@@ -514,7 +514,7 @@ static struct mii_bus *nss_dp_mdio_attach(struct platform_device *pdev)
 		return of_mdio_find_bus(mdio_node);
 	}
 
-	mdio_node = of_find_compatible_node(NULL, NULL, "qcom,ipq40xx-mdio");
+	mdio_node = of_find_compatible_node(NULL, NULL, "qcom,ipq4019-mdio");
 	if (!mdio_node) {
 		dev_err(&pdev->dev, "cannot find mdio node by phandle\n");
 		return NULL;
@@ -527,14 +527,14 @@ static struct mii_bus *nss_dp_mdio_attach(struct platform_device *pdev)
 		return NULL;
 	}
 
-	mdio_data = dev_get_drvdata(&mdio_plat->dev);
-	if (!mdio_data) {
+	bus = dev_get_drvdata(&mdio_plat->dev);
+	if (!bus) {
 		dev_err(&pdev->dev, "cannot get mii bus reference from device data\n");
 		of_node_put(mdio_node);
 		return NULL;
 	}
 
-	return mdio_data->mii_bus;
+	return bus;
 }
 
 #ifdef CONFIG_NET_SWITCHDEV
-- 
2.28.0

